import { PrismaClient, Reaction } from '@prisma/client';
import { faker } from '@faker-js/faker';

const prisma = new PrismaClient();

async function main() {
  console.log('Starting data seeding...');

  const users = await Promise.all(
    Array.from({ length: 1500 }).map(async () => {
      let user;
      while (!user) {
        const username = faker.internet.userName();
        try {
          user = await prisma.users.create({
            data: {
              username,
              first_name: faker.name.firstName(),
              last_name: faker.name.lastName(),
              email: faker.internet.email(),
            },
          });
        } catch (error: any) {
          if (error.code !== 'P2002') {
            throw error;
          }
        }
      }
      return user;
    })
  );

  console.log(`Created ${users.length} users`);

  const posts = await Promise.all(
    users.flatMap((user) =>
      Array.from({ length: 10 }).map(async () => {
        const post = await prisma.posts.create({
          data: {
            content: faker.lorem.sentence(),
            author_id: user.id,
          },
        });
        return post;
      })
    )
  );

  console.log(`Created ${posts.length} posts`);

  const reactions = await Promise.all(
    posts.flatMap((post) =>
      Array.from({ length: 1 }).map(async () => {
        const user = users[Math.floor(Math.random() * users.length)];
        const existingReaction = await prisma.reactions.findUnique({
          where: {
            user_id_post_id: {
              user_id: user.id,
              post_id: post.id,
            },
          },
        });
        if (existingReaction) {
          return existingReaction;
        }
        const reaction = await prisma.reactions.create({
          data: {
            user_id: user.id,
            post_id: post.id,
            type: Math.random() < 0.5 ? Reaction.LIKE : Reaction.DISLIKE,
          },
        });
        return reaction;
      })
    )
  );

  console.log(`Created ${reactions.length} reactions`);

  console.log('Data seeding completed!');
}

main()
  .catch((err) => {
    console.error(err);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
