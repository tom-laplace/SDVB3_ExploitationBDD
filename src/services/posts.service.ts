import { PrismaClient, Posts } from '@prisma/client';

const prisma = new PrismaClient();

export async function getPosts(): Promise<Posts[]> {
  const posts = await prisma.posts.findMany({
    include: {
      author: true,
      reactions: true,
    },
  });
  return posts;
}

export async function getPostById(id: number): Promise<Posts | null> {
  const post = await prisma.posts.findUnique({
    where: { id },
    include: {
      author: true,
      reactions: true,
    },
  });
  return post;
}

export async function createPost(
  content: string,
  author_id: number,
): Promise<Posts> {
  const post = await prisma.posts.create({
    data: {
      content,
      author: { connect: { id: author_id } },
    },
    include: {
      author: true,
      reactions: true,
    },
  });
  return post;
}

export async function updatePost(
  userId: number,
  postId: number,
  content: string,
) {
  const post = await prisma.posts.findUnique({
    where: { id: postId },
    include: { author: true },
  });

  if (!post) {
    throw new Error('Post not found');
  }

  if (post.author.id !== userId) {
    throw new Error('User is not authorized to modify this post');
  }

  const updatedPost = await prisma.posts.update({
    where: { id: postId },
    data: { content },
  });

  return updatedPost;
}

export async function deletePost(id: number): Promise<Posts | null> {
  const post = await prisma.posts.delete({
    where: { id },
    include: {
      author: true,
      reactions: true,
    },
  });
  return post;
}
