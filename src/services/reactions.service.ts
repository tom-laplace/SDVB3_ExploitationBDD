import { PrismaClient, Reactions, Reaction } from '@prisma/client';

const prisma = new PrismaClient();

export async function getReactions(): Promise<Reactions[]> {
  const reactions = await prisma.reactions.findMany({
    include: {
      user: true,
      post: true,
    },
  });
  return reactions;
}

export async function getReactionById(
  user_id: number,
  post_id: number,
): Promise<Reactions | null> {
  const reaction = await prisma.reactions.findUnique({
    where: { user_id_post_id: { user_id, post_id } },
    include: {
      user: true,
      post: true,
    },
  });
  return reaction;
}

export async function createReaction(
  user_id: number,
  post_id: number,
  type: Reaction,
): Promise<Reactions> {
  const reaction = await prisma.reactions.create({
    data: {
      user: { connect: { id: user_id } },
      post: { connect: { id: post_id } },
      type,
    },
    include: {
      user: true,
      post: true,
    },
  });
  return reaction;
}

export async function updateReaction(
  user_id: number,
  post_id: number,
  data: Partial<Reactions>,
): Promise<Reactions | null> {
  const reaction = await prisma.reactions.update({
    where: { user_id_post_id: { user_id, post_id } },
    data,
    include: {
      user: true,
      post: true,
    },
  });
  return reaction;
}

export async function deleteReaction(
  user_id: number,
  post_id: number,
): Promise<Reactions | null> {
  const reaction = await prisma.reactions.delete({
    where: { user_id_post_id: { user_id, post_id } },
    include: {
      user: true,
      post: true,
    },
  });
  return reaction;
}
