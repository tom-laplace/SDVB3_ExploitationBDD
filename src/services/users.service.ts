import { PrismaClient, Users } from '@prisma/client';

const prisma = new PrismaClient();

export async function getUsers(): Promise<Users[]> {
  const users = await prisma.users.findMany({
    include: {
      posts: true,
      reactions: true,
    },
  });
  return users;
}

export async function getUserById(id: number): Promise<Users | null> {
  const user = await prisma.users.findUnique({
    where: { id },
  });
  return user;
}

export async function createUser(
  username: string,
  first_name: string,
  last_name: string,
  email: string,
): Promise<Users> {
  const user = await prisma.users.create({
    data: {
      username,
      first_name,
      last_name,
      email,
    },
  });
  return user;
}

export async function updateUser(
  id: number,
  data: Partial<Users>,
): Promise<Users | null> {
  const user = await prisma.users.update({
    where: { id },
    data,
  });
  return user;
}

export async function deleteUser(id: number): Promise<Users | null> {
  const user = await prisma.users.delete({
    where: { id },
  });
  return user;
}

export async function getUsersWithReports(): Promise<Users[]> {
  const users = await prisma.users.findMany({
    where: {
      reports: {
        some: {},
      },
    },
  });
  return users;
}

export async function getUsersWithPostsWithoutReports(): Promise<Users[]> {
  const users = await prisma.users.findMany({
    where: {
      posts: {
        some: {
          reports: {
            none: {},
          },
        },
      },
    },
  });
  return users;
}
