import { PrismaClient, Reports } from '@prisma/client';

const prisma = new PrismaClient();

export async function getReports(): Promise<Reports[]> {
  const reports = await prisma.reports.findMany({
    include: {
      post: true,
      user: true,
    },
  });
  return reports;
}

export async function getReportById(
  user_id: number,
  post_id: number,
): Promise<Reports | null> {
  const report = await prisma.reports.findUnique({
    where: { user_id_post_id: { user_id, post_id } },
    include: {
      post: true,
      user: true,
    },
  });
  return report;
}

export async function createReport(
  post_id: number,
  author_id: number,
  reason: string,
): Promise<Reports> {
  const report = await prisma.reports.create({
    data: {
      post: { connect: { id: post_id } },
      user: { connect: { id: author_id } },
      reason,
    },
    include: {
      post: true,
      user: true,
    },
  });
  return report;
}

export async function updateReport(
  user_id: number,
  post_id: number,
  data: string,
): Promise<Reports | null> {
  const report = await prisma.reports.update({
    where: { user_id_post_id: { user_id, post_id } },
    data: {
      reason: data,
    },
    include: {
      post: true,
      user: true,
    },
  });
  return report;
}

export async function deleteReport(
    user_id: number,
    post_id: number,
): Promise<Reports | null> {
  const report = await prisma.reports.delete({
    where: { user_id_post_id: { user_id, post_id }  },
    include: {
      post: true,
      user: true,
    },
  });
  return report;
}

export async function getReportsCount(): Promise<number> {
  const count = await prisma.reports.count();
  return count;
}
