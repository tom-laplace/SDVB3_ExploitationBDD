import express from 'express';
import {
  createPost,
  deletePost,
  getPostById,
  getPosts,
  updatePost,
  getPostsWithReactionsAndReportsCount,
} from '../services/posts.service';

const postsController = express.Router();

postsController.get('/', async (_req, res) => {
  try {
    const posts = await getPosts();
    res.json(posts);
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

postsController.get('/with-reactions-and-reports-count', async (req, res) => {
  try {
    const posts = await getPostsWithReactionsAndReportsCount();
    res.json(posts);
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

postsController.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const post = await getPostById(parseInt(id));
    if (post) {
      res.json(post);
    } else {
      res.status(404).send('Post not found');
    }
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

postsController.post('/', async (req, res) => {
  try {
    const { content, author_id } = req.body;
    const post = await createPost(content, parseInt(author_id));
    res.json(post);
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

postsController.put('/:id', async (req, res) => {
  const { userId, postId, content } = req.body;

  try {
    const updatedPost = await updatePost(
      userId,
      postId,
      content
    );
    res.status(200).json(updatedPost);
  } catch (err: Error | any) {
    res.status(400).json({ error: err.message });
  }
});

postsController.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const deletedPost = await deletePost(parseInt(id));
    if (deletedPost) {
      res.json(deletedPost);
    } else {
      res.status(404).send('Post not found');
    }
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

export default postsController;
